version: '3.7'

# -------------------------------------------------
# Base
# -------------------------------------------------
x-nethermind-base:
  &nethermind-base
  image: nethermind/nethermind:${NETHERMIND_VERSION}
  restart: unless-stopped
  init: true
  networks: [ cluster ]
  command: >-
    --config=${NETWORK}
    --JsonRpc.Port=8545
    --JsonRpc.Host=0.0.0.0
    --JsonRpc.EnginePort=8551
    --JsonRpc.EngineHost=0.0.0.0
    --JsonRpc.AdditionalRpcUrls=http://localhost:8551|http;wss|engine;eth;net;subscribe
    --JsonRpc.JwtSecretFile=/tmp/ethereum/jwtsecret
    --JsonRpc.Enabled=true
    --HealthChecks.Enabled=true 
    --HealthChecks.UIEnabled=true
    --Metrics.Enabled=true
    --Metrics.ExposePort=8645
  deploy:
    resources:
      limits:
        cpus: ${NETHERMIND_MAX_CPU:-1}
        memory: ${NETHERMIND_MAX_MEM:-16G}



services:

# -------------------------------------------------
# Eth Nodes
# -------------------------------------------------

  nethermind-lh:
    <<: *nethermind-base
    ports:
      - "127.0.0.1:8545:8545"    # JSON-RPC port
      - "127.0.0.1:8645:8645"    # Prometheus metrics port
      - "30303:30303"  # P2P port 
    environment:
      - NETHERMIND_NETWORKCONFIG_DISCOVERYPORT=30303
      - NETHERMIND_NETWORKCONFIG_P2PPORT=30303
    volumes:
      - ${NETH_LH_DATA_FOLDER}/.nethermind-lh/nethermind_db:/nethermind/nethermind_db
      - ${NETH_LH_DATA_FOLDER}/.nethermind-lh/logs:/nethermind/logs
      - ${NETH_LH_DATA_FOLDER}/.nethermind-lh/keystore:/nethermind/keystore
      - ./data:/tmp/ethereum
  
  # One would not run lighthouse archival and lighthouse normal at the same time
  # Keep in mind this is experimental
  lighthouse-archival:
    image: sigp/lighthouse:${LIGHTHOUSE_ARCHIVAL_TAG}
    restart: unless-stopped
    init: true
    networks: [ cluster ]
    ports:
      - "127.0.0.1:5054:5054" # Prometheus metrics
      - "127.0.0.1:5052:5052" # Rest API port
      - "9000:9000" # P2P port
    command: >-
      lighthouse
      --network=${NETWORK}
      --debug-level=info
      --logfile-debug-level=info
      --logfile=/root/.lighthouse/lighthouse.log
      beacon_node
      --unsafe-and-dangerous-mode 
      --reconstruct-historic-states
      --eth1
      --http
      --metrics
      --metrics-address=0.0.0.0
      --http-address=0.0.0.0
      --execution-endpoints=http://nethermind-lh:8551
      --jwt-secrets=/tmp/ethereum/jwtsecret
      --suggested-fee-recipient=${FEE_RECIPIENT}

    volumes:
      - ${LH_DATA_FOLDER}/.lighthouse-archival:/root/.lighthouse
      - ./data:/tmp/ethereum


  lighthouse:
    image: sigp/lighthouse:${LIGHTHOUSE_TAG}
    restart: unless-stopped
    init: true
    networks: [ cluster ]
    ports:
      - "127.0.0.1:5054:5054" # Prometheus metrics
      - "127.0.0.1:5052:5052" # Rest API port
      - "9001:9000" # P2P port
    command: >-
      lighthouse
      --network=${NETWORK}
      --debug-level=info
      --logfile-debug-level=info
      --logfile=/root/.lighthouse/lighthouse.log
      beacon_node
      --slots-per-restore-point=${SLOTS_PER_RESTORE_POINT:-8192}
      --eth1
      --http
      --metrics
      --metrics-address=0.0.0.0
      --http-address=0.0.0.0
      --execution-endpoints=http://nethermind-lh:8551
      --jwt-secrets=/tmp/ethereum/jwtsecret
      --suggested-fee-recipient=${FEE_RECIPIENT}

    volumes:
      - ${LH_DATA_FOLDER}/.lighthouse:/root/.lighthouse
      - ./data:/tmp/ethereum
  
  lighthouse-val:
    image: sigp/lighthouse:${LIGHTHOUSE_TAG}
    restart: unless-stopped
    init: true
    networks: [ cluster ]
    ports:
      - "127.0.0.1:5064:5064" # Prometheus metrics
    command: >-
      lighthouse
      --network=${NETWORK}
      --debug-level=info
      --logfile-debug-level=info
      --logfile=/root/.lighthouse/lighthouse-val.log
      vc
      --beacon-nodes=http://lighthouse:5052
      --enable-doppelganger-protection=true
      --http
      --metrics
      --suggested-fee-recipient=${FEE_RECIPIENT}
      --graffiti="Lighthouse"

    volumes:
      - ${LH_DATA_FOLDER}/.lighthouse:/root/.lighthouse

  nethermind-prysm:
    <<: *nethermind-base
    ports:
      - "127.0.0.1:8546:8545"    # JSON-RPC port
      - "127.0.0.1:8646:8645"    # Prometheus metrics port
      - "30304:30304"  # P2P port
    environment:
      - NETHERMIND_NETWORKCONFIG_DISCOVERYPORT=30304
      - NETHERMIND_NETWORKCONFIG_P2PPORT=30304

    volumes:
      - ${NETH_PRYSM_DATA_FOLDER}/.nethermind-prysm/nethermind_db:/nethermind/nethermind_db
      - ${NETH_PRYSM_DATA_FOLDER}/.nethermind-prysm/logs:/nethermind/logs
      - ${NETH_PRYSM_DATA_FOLDER}/.nethermind-prysm/keystore:/nethermind/keystore
      - ./data:/tmp/ethereum

  prysm:
    image: gcr.io/prysmaticlabs/prysm/beacon-chain:${PRYSM_TAG}
    restart: unless-stopped
    init: true
    networks: [ cluster ]
    ports:
      - "127.0.0.1:8080:8080" # Prometheus metrics
      - "127.0.0.1:3500:3500" # Rest API port
      - "13000:13000" # P2P TCP port
      - "12000:12000" # P2P UDP port
      - "127.0.0.1:4000:4000" # For Prysm val
    command: >-
      --accept-terms-of-use
      --${NETWORK}
      --suggested-fee-recipient=${FEE_RECIPIENT}
      --execution-endpoint=http://nethermind-prysm:8551
      --monitoring-host=0.0.0.0
      --rpc-host=0.0.0.0
      --jwt-secret=/tmp/ethereum/jwtsecret
      --log-file=/home/.eth2/prysm.log
    volumes:
      - ${PRYSM_DATA_FOLDER}/.prysm:/home/.eth2/
      - ./data:/tmp/ethereum
  
  prysm-val:
    image: gcr.io/prysmaticlabs/prysm/validator:${PRYSM_TAG}
    restart: unless-stopped
    init: true
    network_mode: host # For now as Prysm does not allow to connect to remote bn
    command: >-
      --accept-terms-of-use
      --${NETWORK}
      --wallet-dir=/wallet 
      --datadir=/validatorDB
      --wallet-password-file=/secret.txt
      --suggested-fee-recipient=${FEE_RECIPIENT}
      --log-file=/prysm-log/prysm-val.log
      --enable-doppelganger=true
      --graffiti="Prysm"
    volumes:
      - ${VALIDATOR_KEYS_FOLDER}/prysm/secret.txt:/secret.txt
      - ${PRYSM_DATA_FOLDER}/.prysm-val/wallet:/wallet
      - ${PRYSM_DATA_FOLDER}/.prysm-val/db:/validatorDB
      - ${PRYSM_DATA_FOLDER}/.prysm-val/log/:/prysm-log
  
  nethermind-teku:
    <<: *nethermind-base
    ports:
      - "127.0.0.1:8547:8545"   # JSON-RPC port
      - "127.0.0.1:8647:8645"   # Prometheus metrics port
      - "30305:30305" # P2P port
    environment:
      - NETHERMIND_NETWORKCONFIG_DISCOVERYPORT=30305
      - NETHERMIND_NETWORKCONFIG_P2PPORT=30305

    volumes:
      - ${NETH_TEKU_DATA_FOLDER}/.nethermind-teku/nethermind_db:/nethermind/nethermind_db
      - ${NETH_TEKU_DATA_FOLDER}/.nethermind-teku/logs:/nethermind/logs
      - ${NETH_TEKU_DATA_FOLDER}/.nethermind-teku/keystore:/nethermind/keystore
      - ./data:/tmp/ethereum

  teku:
    image: consensys/teku:${TEKU_TAG}
    restart: unless-stopped
    init: true
    networks: [ cluster ]
    ports:
      - "127.0.0.1:8008:8008" # Prometheus metrics
      - "127.0.0.1:5051:5051" # Rest port
      - "9002:9002" # P2P port
    command: >-
      --network=${NETWORK}
      --ee-endpoint=http://nethermind-teku:8551
      --ee-jwt-secret-file=/tmp/ethereum/jwtsecret
      --validators-proposer-default-fee-recipient=${FEE_RECIPIENT}
      --metrics-enabled=true
      --metrics-interface=0.0.0.0
      --rest-api-enabled=true
      --rest-api-interface=0.0.0.0
      --rest-api-host-allowlist=localhost, 127.0.0.1,teku-val,*
      --beacon-liveness-tracking-enabled=true
      --p2p-port=9002

    volumes:
      - ${TEKU_DATA_FOLDER}/.teku:/opt/teku/.local/share/teku/
      - ./data:/tmp/ethereum
    # Check teku host directory permissions as it throws an error(777)
  
  teku-val:
    image: consensys/teku:${TEKU_TAG}
    restart: unless-stopped
    init: true
    networks: [ cluster ]
    ports:
      - "127.0.0.1:5065:8008" # Prometheus Metrics
    command: >-
      validator-client
      --network=${NETWORK}
      --beacon-node-api-endpoint=http://teku:5051
      --validator-keys=/validator/keys:/validator/passwords
      --validators-proposer-default-fee-recipient=${FEE_RECIPIENT}
      --metrics-enabled=true
      --validators-graffiti="Teku"
      --doppelganger-detection-enabled=true
    
    volumes:
      - ${TEKU_DATA_FOLDER}/.teku-val:/validator
      - ${TEKU_DATA_FOLDER}/.teku:/opt/teku/.local/share/teku/
    # Check teku host directory permissions as it throws an error(777)
    # Metrics on 8008

  nethermind-nimbus:
    <<: *nethermind-base
    ports:
      - "127.0.0.1:8548:8545"   # JSON-RPC port
      - "127.0.0.1:8648:8645"   # Prometheus metrics port
      - "30306:30306" # P2P port
    environment:
      - NETHERMIND_NETWORKCONFIG_DISCOVERYPORT=30306
      - NETHERMIND_NETWORKCONFIG_P2PPORT=30306

    volumes:
      - ${NETH_NIMBUS_DATA_FOLDER}/.nethermind-nimbus/nethermind_db:/nethermind/nethermind_db
      - ${NETH_NIMBUS_DATA_FOLDER}/.nethermind-nimbus/logs:/nethermind/logs
      - ${NETH_NIMBUS_DATA_FOLDER}/.nethermind-nimbus/keystore:/nethermind/keystore
      - ./data:/tmp/ethereum

  nimbus:
    image: statusim/nimbus-eth2:${NIMBUS_TAG}
    restart: unless-stopped
    init: true
    networks: [ cluster ]
    ports:
      - "127.0.0.1:8009:8008" # Prometheus metrics
      - "127.0.0.1:5053:5052" # Rest Port
      - "9003:9003" # P2P port
    command: >-
      --network=${NETWORK}
      --web3-url=http://nethermind-nimbus:8551
      --rest
      --metrics
      --jwt-secret=/tmp/ethereum/jwtsecret
      --suggested-fee-recipient=${FEE_RECIPIENT}
      --log-file=/home/user/.cache/nimbus/BeaconNode/nimbus.log
      --metrics-address=0.0.0.0
      --tcp-port=9003 
      --udp-port=9003

    volumes:
      - ${NIMBUS_DATA_FOLDER}/.nimbus:/home/user/.cache/nimbus/BeaconNode
      - ./data:/tmp/ethereum

  nethermind-lodestar:
    <<: *nethermind-base
    ports:
      - "127.0.0.1:8549:8545"   # JSON-RPC port
      - "127.0.0.1:8649:8645"   # Prometheus metrics port
      - "30307:30307" # P2P port
    environment:
      - NETHERMIND_NETWORKCONFIG_DISCOVERYPORT=30307
      - NETHERMIND_NETWORKCONFIG_P2PPORT=30307

    volumes:
      - ${NETH_LODESTAR_DATA_FOLDER}/.nethermind-lodestar/nethermind_db:/nethermind/nethermind_db
      - ${NETH_LODESTAR_DATA_FOLDER}/.nethermind-lodestar/logs:/nethermind/logs
      - ${NETH_LODESTAR_DATA_FOLDER}/.nethermind-lodestar/keystore:/nethermind/keystore
      - ./data:/tmp/ethereum

  lodestar:
    image: chainsafe/lodestar:${LODESTAR_TAG}
    restart: unless-stopped
    init: true
    networks: [ cluster ]
    ports:
      - "127.0.0.1:8010:8008" # Prometheus metrics
      - "127.0.0.1:9596:9596" # Rest port
      - "9004:9004" # P2P port
    command: >-
      beacon
      --network=${NETWORK}
      --execution.urls="http://nethermind-lodestar:8551"
      --network.connectToDiscv5Bootnodes
      --suggestedFeeRecipient=${FEE_RECIPIENT}
      --jwt-secret="/tmp/ethereum/jwtsecret"
      --logFile=/root/.local/share/lodestar/lodestar.log
      --metrics=true
      --metrics.address=0.0.0.0
      --rest.address=0.0.0.0
      --port=9004
      --listenAddress=0.0.0.0

    volumes:
      - ${LODESTAR_DATA_FOLDER}/.lodestar:/root/.local/share/lodestar
      - ./data:/tmp/ethereum
  
  lodestar-val:
    image: chainsafe/lodestar:${LODESTAR_TAG}
    restart: unless-stopped
    init: true
    networks: [ cluster ]
    ports:
      - "127.0.0.1:5067:5064" # Prometheus metrics
    command: >-
      validator
      --network=${NETWORK}
      --beaconNodes=http://lodestar:9596
      --keystore=/validator/keys
      --passphraseFile=/validator/secret.txt
      --suggestedFeeRecipient=${FEE_RECIPIENT}
      --doppelgangerProtectionEnabled=true
      --metrics=true
      --graffiti="Lodestar"
      --logFile=/root/.local/share/lodestar/lodestar-val.log

    volumes:
      - ${LODESTAR_DATA_FOLDER}/.lodestar-val:/validator
      - ${LODESTAR_DATA_FOLDER}/.lodestar:/root/.local/share/lodestar
      - ./data:/tmp/ethereum

# -------------------------------------------------
# Additional Tools
# -------------------------------------------------

  vouch:
    image: vouch-tdahar:latest
    build:
      context: ./.vouch/
      dockerfile: Dockerfile
    init: true
    ports: 
      - "127.0.0.1:8081:8081"
    networks: [ cluster ]
    restart: always
    volumes: 
      - ./apps-data/.vouch/data:/app/logs
      - ./.vouch/vouch.yml:/app/vouch.yml
  
  eth-cl-live-metrics:
    image: eth-cl-live-metrics:latest
    build:
      context: ./.eth_cl_live_metrics/
      dockerfile: Dockerfile
    container_name: eth-cl-live-metrics
    init: true
    command: >-
      live-metrics
      --log-level=${LIVE_METRICS_LOG_LEVEL}
      --bn-endpoints=${LIVE_METRICS_BN_ENDPOINTS}
      --db-endpoint=${LIVE_METRICS_DB_ENDPOINT}
      --db-workers=${LIVE_METRICS_DB_WORKERS}
      --metrics=${LIVE_METRICS_METRICS}
    networks: [ cluster ]
    restart: unless-stopped
  
  pool-metrics:
    image: alrevuelta/eth-metrics:latest
    container_name: eth-pool-metrics-${NETWORK}
    init: true
    networks: [ cluster ]
    ports:
      - "127.0.0.1:9500:9500"
    command: >-
      --from-address=0xa111B576408B1CcDacA3eF26f22f082C49bcaa55
      --eth1address=${POOL_METRICS_EL_ENDPOINT}
      --eth2address=${POOL_METRICS_CL_ENDPOINT}
      --pool-name=/custom_pools/frankfurt-lighthouse.txt
    volumes:
      - ${POOL_METRICS_PUBKEYS_FOLDER:-./}:/custom_pools/

# -------------------------------------------------
# Monitoring and Data Storage
# -------------------------------------------------

  node-exporter:
    image: prom/node-exporter:latest
    network_mode: host
    command: >-
      --path.rootfs=/host
      --web.listen-address=localhost:9100

    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'
  
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    networks: [ cluster ]
    ports:
      - "127.0.0.1:8090:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
  
  pushgateway:
    image: prom/pushgateway
    restart: unless-stopped
    init: true
    network_mode: 'host'
    labels:
      org.label-schema.group: "monitoring"

  prometheus:
    image: prom/prometheus:latest
    init: true
    volumes:
      - ./prometheus/:/etc/prometheus/
      - ./apps-data/.prometheus:/prometheus/data
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.listen-address=${PROMETHEUS_ADDRESS:-localhost:9090}'
      - '--storage.tsdb.retention.time=1y'
      - '--web.enable-remote-write-receiver'
    network_mode: 'host'
    restart: unless-stopped
  
  # Reverse Proxy with Nginx
  # ----------------------------------------------
  # upstream grafana {
  #   server ip:3000;
  # }
  # location /path {
  #   rewrite  ^/path/(.*)  /$1 break;
  #   proxy_set_header Host $http_host;
  #   proxy_pass http://grafana;
  # }
  # ----------------------------------------------
  grafana:
    image: grafana/grafana:10.1.0-ubuntu
    init: true
    network_mode: 'host'
    volumes:
      - ./apps-data/grafana:/var/lib/grafana
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
    environment:
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL}

  db:
    image: postgres:14.1-alpine
    restart: unless-stopped 
    init: true
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes: 
      - ./data/init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
      - ./apps-data/.postgres-data/:/var/lib/postgresql
    networks: [ cluster ]


networks:
  cluster: